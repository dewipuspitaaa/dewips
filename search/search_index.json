{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Selamat Datang di Halaman Komputasi Numerik \u00b6 Profil \u00b6 Nama: Dewi Puspita Sari NIM: 180411100113 Kelas: Komputasi Numerik 4A Program Studi: Teknik Informatika Dosen Pengampu: Mula'ab, S.Si, M.Kom","title":"Home"},{"location":"#selamat-datang-di-halaman-komputasi-numerik","text":"","title":"Selamat Datang di Halaman Komputasi Numerik"},{"location":"#profil","text":"Nama: Dewi Puspita Sari NIM: 180411100113 Kelas: Komputasi Numerik 4A Program Studi: Teknik Informatika Dosen Pengampu: Mula'ab, S.Si, M.Kom","title":"Profil"},{"location":"tugas1/","text":"Menghitung Nilai [e^{}] dengan Pendekatan Deret MacLaurin \u00b6 Deret Taylor dan Deret MacLaurin Sebuah fungsi F(x) yang memiliki turunan F^{1}(x),F^{2}(x),F^{3}(x) dan seterusnya kontiyu dalam interval I dan a,xI maka x disekitar a yang [x-a]<f(x) dapat diekspansi kedalam Deret Taylor. Deret Taylor didefinisikan sebagai berikut. $$ (x)=f(a)=\\frac{f^{1}a(x-a)}{1!}+\\frac{f^{2}a(x-a)^2}{2!}+\\frac{x^{3}a(x-a)^3}{3!}...\\frac{f^{n}a(x-a)^n}{n!} $$ Deret MarcLaurin masih berhubungan dengan Deret Taylor. Deret MacLaurin merupakan kasusu dari deret Tayor dengan fungsi yang di ekspansi di sekitar nilai a=0 . Deret MacLaurin disebut sebagai Deret Taylor Baku, sehingga sebagai berikut. $$ f(x)=f(0)+\\frac{f^{1}(0)x}{1!}+\\frac{f^{2}(0)x^2}{2!}+\\frac{f^{3}(0)x^3}{3!}...\\frac{f^{n}(0)x^n}{n!} $$ Dalam deret macLauren yaitu menunjukkan tiap-tiap suku sampai batas yang ditentukan, sehingga akan menghasilkan nilai yang mendekati nilai yang sebenarnya. Deret MacLauren ini di manfaatkan dalam metode numerik untuk menghitung atau menghampiri nilai fungsi susah dihitung secara manual, seperti halnya kita ingin mencari nilai dari sinx, cosx, e^{x}, logx atau ln(x+1) . Kita membutuhkan alat khusus, seperti kalkulator atau tabel khusus untuk mencari nilai-nilai dari fungsi tersebut. Implementasi import math error = 0.001 def percent ( angka ): return str ( round ( angka * 100 , 4 )) + '%' def f ( x ): f_turunan = 1 current = i = 0 iteration = True while iteration : old = current current += ( f_turunan * ( x ** i )) / math . factorial ( i ) #\u03a3f(0)x^i / i! print ( 'f ke-' , i , '=' , f_turunan , ' {e^3x=' , current , '} {Ea=' , current - old , '} {|\u03f5a|%=' , ( current - old ) / current , '|' , percent (( current - old ) / current ), '}' ) if current - old < error : iteration = False else : f_turunan *= 3 i += 1 f ( 1 ) `f ke- 0 = 1 {e^3x= 1.0 } {Ea= 1.0 } {|\u03f5a|%= 1.0 | 100.0% }` `f ke- 1 = 3 {e^3x= 4.0 } {Ea= 3.0 } {|\u03f5a|%= 0.75 | 75.0% }` `f ke- 2 = 9 {e^3x= 8.5 } {Ea= 4.5 } {|\u03f5a|%= 0.5294117647058824 | 52.9412% }` `f ke- 3 = 27 {e^3x= 13.0 } {Ea= 4.5 } {|\u03f5a|%= 0.34615384615384615 | 34.6154% }` `f ke- 4 = 81 {e^3x= 16.375 } {Ea= 3.375 } {|\u03f5a|%= 0.20610687022900764 | 20.6107% }` `f ke- 5 = 243 {e^3x= 18.4 } {Ea= 2.0249999999999986 } {|\u03f5a|%= 0.11005434782608689 | 11.0054% }` `f ke- 6 = 729 {e^3x= 19.412499999999998 } {Ea= 1.0124999999999993 } {|\u03f5a|%= 0.05215711526078554 | 5.2157% }` `f ke- 7 = 2187 {e^3x= 19.846428571428568 } {Ea= 0.4339285714285701 } {|\u03f5a|%= 0.02186431527802765 | 2.1864% }` `f ke- 8 = 6561 {e^3x= 20.009151785714284 } {Ea= 0.162723214285716 } {|\u03f5a|%= 0.008132439397150944 | 0.8132% }` `f ke- 9 = 19683 {e^3x= 20.063392857142855 } {Ea= 0.05424107142857082 } {|\u03f5a|%= 0.0027034844911218605 | 0.2703% }` `f ke- 10 = 59049 {e^3x= 20.079665178571425 } {Ea= 0.016272321428569825 } {|\u03f5a|%= 0.0008103880858499218 | 0.081% }` `f ke- 11 = 177147 {e^3x= 20.08410308441558 } {Ea= 0.004437905844156376 } {|\u03f5a|%= 0.00022096609569784593 | 0.0221% }` `f ke- 12 = 531441 {e^3x= 20.08521256087662 } {Ea= 0.001109476461039094 } {|\u03f5a|%= 5.523847246706314e-05 | 0.0055% }` ` f ke - 13 = 1594323 { e ^ 3 x = 20.08546859390609 } { Ea = 0.0002560330294691937 } { | \u03f5 a |%= 1.2747177307422833e-05 | 0.0013 % }","title":"MacLaurin"},{"location":"tugas1/#menghitung-nilai-91e93-dengan-pendekatan-deret-maclaurin","text":"Deret Taylor dan Deret MacLaurin Sebuah fungsi F(x) yang memiliki turunan F^{1}(x),F^{2}(x),F^{3}(x) dan seterusnya kontiyu dalam interval I dan a,xI maka x disekitar a yang [x-a]<f(x) dapat diekspansi kedalam Deret Taylor. Deret Taylor didefinisikan sebagai berikut. $$ (x)=f(a)=\\frac{f^{1}a(x-a)}{1!}+\\frac{f^{2}a(x-a)^2}{2!}+\\frac{x^{3}a(x-a)^3}{3!}...\\frac{f^{n}a(x-a)^n}{n!} $$ Deret MarcLaurin masih berhubungan dengan Deret Taylor. Deret MacLaurin merupakan kasusu dari deret Tayor dengan fungsi yang di ekspansi di sekitar nilai a=0 . Deret MacLaurin disebut sebagai Deret Taylor Baku, sehingga sebagai berikut. $$ f(x)=f(0)+\\frac{f^{1}(0)x}{1!}+\\frac{f^{2}(0)x^2}{2!}+\\frac{f^{3}(0)x^3}{3!}...\\frac{f^{n}(0)x^n}{n!} $$ Dalam deret macLauren yaitu menunjukkan tiap-tiap suku sampai batas yang ditentukan, sehingga akan menghasilkan nilai yang mendekati nilai yang sebenarnya. Deret MacLauren ini di manfaatkan dalam metode numerik untuk menghitung atau menghampiri nilai fungsi susah dihitung secara manual, seperti halnya kita ingin mencari nilai dari sinx, cosx, e^{x}, logx atau ln(x+1) . Kita membutuhkan alat khusus, seperti kalkulator atau tabel khusus untuk mencari nilai-nilai dari fungsi tersebut. Implementasi import math error = 0.001 def percent ( angka ): return str ( round ( angka * 100 , 4 )) + '%' def f ( x ): f_turunan = 1 current = i = 0 iteration = True while iteration : old = current current += ( f_turunan * ( x ** i )) / math . factorial ( i ) #\u03a3f(0)x^i / i! print ( 'f ke-' , i , '=' , f_turunan , ' {e^3x=' , current , '} {Ea=' , current - old , '} {|\u03f5a|%=' , ( current - old ) / current , '|' , percent (( current - old ) / current ), '}' ) if current - old < error : iteration = False else : f_turunan *= 3 i += 1 f ( 1 ) `f ke- 0 = 1 {e^3x= 1.0 } {Ea= 1.0 } {|\u03f5a|%= 1.0 | 100.0% }` `f ke- 1 = 3 {e^3x= 4.0 } {Ea= 3.0 } {|\u03f5a|%= 0.75 | 75.0% }` `f ke- 2 = 9 {e^3x= 8.5 } {Ea= 4.5 } {|\u03f5a|%= 0.5294117647058824 | 52.9412% }` `f ke- 3 = 27 {e^3x= 13.0 } {Ea= 4.5 } {|\u03f5a|%= 0.34615384615384615 | 34.6154% }` `f ke- 4 = 81 {e^3x= 16.375 } {Ea= 3.375 } {|\u03f5a|%= 0.20610687022900764 | 20.6107% }` `f ke- 5 = 243 {e^3x= 18.4 } {Ea= 2.0249999999999986 } {|\u03f5a|%= 0.11005434782608689 | 11.0054% }` `f ke- 6 = 729 {e^3x= 19.412499999999998 } {Ea= 1.0124999999999993 } {|\u03f5a|%= 0.05215711526078554 | 5.2157% }` `f ke- 7 = 2187 {e^3x= 19.846428571428568 } {Ea= 0.4339285714285701 } {|\u03f5a|%= 0.02186431527802765 | 2.1864% }` `f ke- 8 = 6561 {e^3x= 20.009151785714284 } {Ea= 0.162723214285716 } {|\u03f5a|%= 0.008132439397150944 | 0.8132% }` `f ke- 9 = 19683 {e^3x= 20.063392857142855 } {Ea= 0.05424107142857082 } {|\u03f5a|%= 0.0027034844911218605 | 0.2703% }` `f ke- 10 = 59049 {e^3x= 20.079665178571425 } {Ea= 0.016272321428569825 } {|\u03f5a|%= 0.0008103880858499218 | 0.081% }` `f ke- 11 = 177147 {e^3x= 20.08410308441558 } {Ea= 0.004437905844156376 } {|\u03f5a|%= 0.00022096609569784593 | 0.0221% }` `f ke- 12 = 531441 {e^3x= 20.08521256087662 } {Ea= 0.001109476461039094 } {|\u03f5a|%= 5.523847246706314e-05 | 0.0055% }` ` f ke - 13 = 1594323 { e ^ 3 x = 20.08546859390609 } { Ea = 0.0002560330294691937 } { | \u03f5 a |%= 1.2747177307422833e-05 | 0.0013 % }","title":"Menghitung Nilai [e^{}] dengan Pendekatan Deret MacLaurin"},{"location":"tugas2/","text":"Fungsi Persamaan Non Linier dengan Metode Newton Raphson \u00b6 Penyelesaian persamaan non linier adalah penentuan akar-akar persamaan non linier. Dimana akar sebuah persamaan f(x) =0 adalah nilai-nilai x yang menyebabkan nilai f(x) sama dengan nol. Dengan kata lain akar persamaan f(x) adalah titik potong antara kurva f(x) dan sumbu X . Beberapa persamaan polynomial yang sederhana dapat diselesaikan theorema sisa. Sehingga tidak memerlukan metode numerik dalam menyelesaikannya, karena metode analitik dapat dilakukan. Tetapi bagaimana menyelesaikan persamaan \u200b $$ x\u2013 e-x = 0 $$ Tampaknya sederhana, tetapi untuk menyelesaikan persamaan non linier merupakan metode pencarian akar secara berulang-ulang. Secara sederhana, untuk menyelesaikan persamaan non linier dapat dilakukan dengan menggunakan metode tabel atau pembagian area. Dimana untuk x = [ a , b ] atau x di antara a dan b dibagi sebanyak N bagian dan pada masing-masing bagian dihitung nilai f(x) bila ditemukan f(xk)=0 atau mendekati nol maka dikatakan bahwa xk adalah penyelesaian persamaan f(xk)=0 . Bila tidak ada f(xk) yang sama dengan nol, maka dicari nilai f(xk) dan f(xk+1) yang berlawanan tanda, bila tidak ditemukan maka, f(a).f(b)<0 pada range x=[a,b] terdapat akar f(a).f(b)>0 pada range x=[a,b] dikatakan tidak mempunyai akar untuk x = [ a , b ] dan bila ditemukan maka ada 2 pendapat untuk menentukan akar persamaan, yaitu : Akar persamaan ditentukan oleh nilai mana yang lebih dekat, bila |f(xk)| \u2264 |f(xk+1)| maka akarnya xk , dan bila |f(xk+1)|<|f(xk)| maka akarnya xk+1. Akarnya perlu di cari lagi, dengan range x = [ ] xk , xk +1 Metode Newton Raphson \u00b6 Metode newton raphson adalah metode pendekatan yang menggunakan satu titik awal dan mendekatinya dengan memperhatikan slope atau gradien pada titik tersebut. Algoritma Metode Newton Raphson Mendefinisikan fungsi f(x) dan f1(x) Menentukan toleransi error (e) dan iterasi maksimum ( n ) Menentukan nilai pendekatan awal x0 Menghitung f(x0) dan f1(x0) Untuk iterasi I= 1 atau |f(xi)|\u2265 e, akar persamaan adalah nilai xi yang terakhir diperoleh. $$ x_{n+1} = x_{n} + \\frac{F(x_{n})}{F^{1}(x_{n})} $$ Algoritma Metode Newton Raphson dengan modifikasi tabel : Mendefinisikan fungsi F(x) Mengambil range nilai x =[ a , b ] dengan jumlah pembagi n Memasukkan torelansi error ( e ) dan masukkan iterasi n Menggunakan algoritma tabel diperoleh titik pendekatan awal x0 dari : F(xk) . F(xk+1)<0 maka x0 = xk Hitung F(x0) dan F1(x0) Bila F ( abs ( F ( x 0 )))< e ,maka pendekatan awal x0 digeser sebesar dx (dimasukkan) x0 = x0 + dx , hitung F(x0) dan F1(x0)* Untuk iterasi I= 1 atau |F(xi)|\u2265 e Akar persamaan adalah x terakhir yang diperoleh. #### Implementasi import math e = 2.71828 def fungsi ( x ): x = float (( e ** x ) - ( 4 * x )) return x def fungsiturunan ( x ): x = float (( e ** x ) - ( 4 )) return x x = float ( input ( 'Masukkan nilai awal = ' )) error = float ( input ( 'Masukkan nilai error = ' )) perulangan = int ( input ( 'Masukkan maksimal pengulangan = ' )) iterasi = 0 selisih = error + 1 while iterasi <= perulangan and selisih > error : iterasi += 1 f_2 = x - ( fungsi ( x ) / fungsiturunan ( x )) selisih = math . fabs ( f_2 - x ) x = f_2 print ( \"Iterasi ke = \" , iterasi , \", x = \" , f_2 , \", f(\" , f_2 , \") = \" , fungsi ( f_2 ), \", selisih = \" , error ) if iterasi <= perulangan : print ( \"Perulangan Mencapai Batas Maksimal dengan hasil = \" , f_2 ) else : print ( \"Toleransi tidak terpenuhi\" ) Masukkan nilai awal = 1 Masukkan nilai error = 0.0001 Masukkan maksimal pengulangan = 2 Iterasi ke = 1 , x = 0.0 , f ( 0.0 ) = 1.0 , selisih = 0.0001 Perulangan Mencapai Batas Maksimal dengan hasil = 0.0 Iterasi ke = 2 , x = 0.3333333333333333 , f ( 0.3333333333333333 ) = 0.06227877883196098 , selisih = 0.0001 Perulangan Mencapai Batas Maksimal dengan hasil = 0.3333333333333333 Iterasi ke = 3 , x = 0.35724635301940616 , f ( 0.35724635301940616 ) = 0.0004022049593612742 , selisih = 0.0001 Toleransi tidak terpenuhi Penjelasan \u00b6 Importh Library math karena kita menggunakan contoh fungsi f(x)=ex\u22124Xf(x)=ex\u22124X maka kita membuat sebuah fungsi yang sesuai , dan juga fungsi turunannya yaitu f\u2032(x)=ex\u22124f\u2032(x)=ex\u22124 Membuat sebuah inputan untuk X , Error / Epsilon , serta Maksimal perulangan untuk stopping condition lalu deklarasikan iterasi = 0 untuk perulangan yang ke 0 nantinya dan akan ditambah setiap kali perulangan deklarasikan selisih untuk xb\u2212x0xb\u2212x0 untuk perbandingan lakukan perulangan dengan kondisi iterasi kurang dari sama dengan inputan maksimal iterasi dan selisih lebih dari error / epsilon hitung xbxb dengan rumus yang sudah kita dapatkan sebelumnya lalu lakukan perbandingan jika mencapai nilai True maka toleransi tidak terpenuhi namun perulangan sudah mencapai batas jika pengecekan selisih > error bernilai bernilai True maka toleransi akan terpenuhi dengan nilai error serta fungsi x pada iterasi ke n","title":"Metode Raphson"},{"location":"tugas2/#fungsi-persamaan-non-linier-dengan-metode-newton-raphson","text":"Penyelesaian persamaan non linier adalah penentuan akar-akar persamaan non linier. Dimana akar sebuah persamaan f(x) =0 adalah nilai-nilai x yang menyebabkan nilai f(x) sama dengan nol. Dengan kata lain akar persamaan f(x) adalah titik potong antara kurva f(x) dan sumbu X . Beberapa persamaan polynomial yang sederhana dapat diselesaikan theorema sisa. Sehingga tidak memerlukan metode numerik dalam menyelesaikannya, karena metode analitik dapat dilakukan. Tetapi bagaimana menyelesaikan persamaan \u200b $$ x\u2013 e-x = 0 $$ Tampaknya sederhana, tetapi untuk menyelesaikan persamaan non linier merupakan metode pencarian akar secara berulang-ulang. Secara sederhana, untuk menyelesaikan persamaan non linier dapat dilakukan dengan menggunakan metode tabel atau pembagian area. Dimana untuk x = [ a , b ] atau x di antara a dan b dibagi sebanyak N bagian dan pada masing-masing bagian dihitung nilai f(x) bila ditemukan f(xk)=0 atau mendekati nol maka dikatakan bahwa xk adalah penyelesaian persamaan f(xk)=0 . Bila tidak ada f(xk) yang sama dengan nol, maka dicari nilai f(xk) dan f(xk+1) yang berlawanan tanda, bila tidak ditemukan maka, f(a).f(b)<0 pada range x=[a,b] terdapat akar f(a).f(b)>0 pada range x=[a,b] dikatakan tidak mempunyai akar untuk x = [ a , b ] dan bila ditemukan maka ada 2 pendapat untuk menentukan akar persamaan, yaitu : Akar persamaan ditentukan oleh nilai mana yang lebih dekat, bila |f(xk)| \u2264 |f(xk+1)| maka akarnya xk , dan bila |f(xk+1)|<|f(xk)| maka akarnya xk+1. Akarnya perlu di cari lagi, dengan range x = [ ] xk , xk +1","title":"Fungsi Persamaan Non Linier dengan Metode Newton Raphson"},{"location":"tugas2/#metode-newton-raphson","text":"Metode newton raphson adalah metode pendekatan yang menggunakan satu titik awal dan mendekatinya dengan memperhatikan slope atau gradien pada titik tersebut. Algoritma Metode Newton Raphson Mendefinisikan fungsi f(x) dan f1(x) Menentukan toleransi error (e) dan iterasi maksimum ( n ) Menentukan nilai pendekatan awal x0 Menghitung f(x0) dan f1(x0) Untuk iterasi I= 1 atau |f(xi)|\u2265 e, akar persamaan adalah nilai xi yang terakhir diperoleh. $$ x_{n+1} = x_{n} + \\frac{F(x_{n})}{F^{1}(x_{n})} $$ Algoritma Metode Newton Raphson dengan modifikasi tabel : Mendefinisikan fungsi F(x) Mengambil range nilai x =[ a , b ] dengan jumlah pembagi n Memasukkan torelansi error ( e ) dan masukkan iterasi n Menggunakan algoritma tabel diperoleh titik pendekatan awal x0 dari : F(xk) . F(xk+1)<0 maka x0 = xk Hitung F(x0) dan F1(x0) Bila F ( abs ( F ( x 0 )))< e ,maka pendekatan awal x0 digeser sebesar dx (dimasukkan) x0 = x0 + dx , hitung F(x0) dan F1(x0)* Untuk iterasi I= 1 atau |F(xi)|\u2265 e Akar persamaan adalah x terakhir yang diperoleh. #### Implementasi import math e = 2.71828 def fungsi ( x ): x = float (( e ** x ) - ( 4 * x )) return x def fungsiturunan ( x ): x = float (( e ** x ) - ( 4 )) return x x = float ( input ( 'Masukkan nilai awal = ' )) error = float ( input ( 'Masukkan nilai error = ' )) perulangan = int ( input ( 'Masukkan maksimal pengulangan = ' )) iterasi = 0 selisih = error + 1 while iterasi <= perulangan and selisih > error : iterasi += 1 f_2 = x - ( fungsi ( x ) / fungsiturunan ( x )) selisih = math . fabs ( f_2 - x ) x = f_2 print ( \"Iterasi ke = \" , iterasi , \", x = \" , f_2 , \", f(\" , f_2 , \") = \" , fungsi ( f_2 ), \", selisih = \" , error ) if iterasi <= perulangan : print ( \"Perulangan Mencapai Batas Maksimal dengan hasil = \" , f_2 ) else : print ( \"Toleransi tidak terpenuhi\" ) Masukkan nilai awal = 1 Masukkan nilai error = 0.0001 Masukkan maksimal pengulangan = 2 Iterasi ke = 1 , x = 0.0 , f ( 0.0 ) = 1.0 , selisih = 0.0001 Perulangan Mencapai Batas Maksimal dengan hasil = 0.0 Iterasi ke = 2 , x = 0.3333333333333333 , f ( 0.3333333333333333 ) = 0.06227877883196098 , selisih = 0.0001 Perulangan Mencapai Batas Maksimal dengan hasil = 0.3333333333333333 Iterasi ke = 3 , x = 0.35724635301940616 , f ( 0.35724635301940616 ) = 0.0004022049593612742 , selisih = 0.0001 Toleransi tidak terpenuhi","title":"Metode Newton Raphson"},{"location":"tugas2/#penjelasan","text":"Importh Library math karena kita menggunakan contoh fungsi f(x)=ex\u22124Xf(x)=ex\u22124X maka kita membuat sebuah fungsi yang sesuai , dan juga fungsi turunannya yaitu f\u2032(x)=ex\u22124f\u2032(x)=ex\u22124 Membuat sebuah inputan untuk X , Error / Epsilon , serta Maksimal perulangan untuk stopping condition lalu deklarasikan iterasi = 0 untuk perulangan yang ke 0 nantinya dan akan ditambah setiap kali perulangan deklarasikan selisih untuk xb\u2212x0xb\u2212x0 untuk perbandingan lakukan perulangan dengan kondisi iterasi kurang dari sama dengan inputan maksimal iterasi dan selisih lebih dari error / epsilon hitung xbxb dengan rumus yang sudah kita dapatkan sebelumnya lalu lakukan perbandingan jika mencapai nilai True maka toleransi tidak terpenuhi namun perulangan sudah mencapai batas jika pengecekan selisih > error bernilai bernilai True maka toleransi akan terpenuhi dengan nilai error serta fungsi x pada iterasi ke n","title":"Penjelasan"}]}